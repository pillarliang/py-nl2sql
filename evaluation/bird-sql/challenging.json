[
    {
        "question_id": 1476,
        "db_id": "debit_card_specializing",
        "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
        "SQL": "SELECT\n  SUM(CASE WHEN `T1`.`Currency` = 'CZK' THEN `T2`.`Consumption` ELSE 0 END) - SUM(CASE WHEN `T1`.`Currency` = 'EUR' THEN `T2`.`Consumption` ELSE 0 END)\nFROM `customers` AS `T1`\nINNER JOIN `yearmonth` AS `T2`\n  ON `T1`.`CustomerID` = `T2`.`CustomerID`\nWHERE\n  SUBSTR(`T2`.`Date`, 1, 4) = '2012'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1481,
        "db_id": "debit_card_specializing",
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T1`.`Segment` = 'SME' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'LAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`),\n  CAST(SUM(CASE WHEN `T1`.`Segment` = 'LAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'KAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`),\n  CAST(SUM(CASE WHEN `T1`.`Segment` = 'KAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'SME' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`)\nFROM `customers` AS `T1`\nINNER JOIN `yearmonth` AS `T2`\n  ON `T1`.`CustomerID` = `T2`.`CustomerID`\nWHERE\n  `T1`.`Currency` = 'CZK'\n  AND `T2`.`Consumption` = (\n    SELECT\n      MIN(`Consumption`)\n    FROM `yearmonth`\n  )\n  AND `T2`.`Date` BETWEEN 201301 AND 201312",
        "difficulty": "challenging"
    },
    {
        "question_id": 1482,
        "db_id": "debit_card_specializing",
        "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
        "SQL": "SELECT\n  CAST((\n    SUM(\n      CASE\n        WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2013%'\n        THEN `T2`.`Consumption`\n        ELSE 0\n      END\n    ) - SUM(\n      CASE\n        WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2012%'\n        THEN `T2`.`Consumption`\n        ELSE 0\n      END\n    )\n  ) AS DOUBLE) * 100 / SUM(\n    CASE\n      WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2012%'\n      THEN `T2`.`Consumption`\n      ELSE 0\n    END\n  ),\n  CAST(SUM(\n    CASE\n      WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2013%'\n      THEN `T2`.`Consumption`\n      ELSE 0\n    END\n  ) - SUM(\n    CASE\n      WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2012%'\n      THEN `T2`.`Consumption`\n      ELSE 0\n    END\n  ) AS DOUBLE) * 100 / SUM(\n    CASE\n      WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2012%'\n      THEN `T2`.`Consumption`\n      ELSE 0\n    END\n  ),\n  CAST(SUM(\n    CASE\n      WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2013%'\n      THEN `T2`.`Consumption`\n      ELSE 0\n    END\n  ) - SUM(\n    CASE\n      WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2012%'\n      THEN `T2`.`Consumption`\n      ELSE 0\n    END\n  ) AS DOUBLE) * 100 / SUM(\n    CASE\n      WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2012%'\n      THEN `T2`.`Consumption`\n      ELSE 0\n    END\n  )\nFROM `customers` AS `T1`\nINNER JOIN `yearmonth` AS `T2`\n  ON `T1`.`CustomerID` = `T2`.`CustomerID`",
        "difficulty": "challenging"
    },
    {
        "question_id": 1526,
        "db_id": "debit_card_specializing",
        "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2012' THEN `Consumption` ELSE 0 END) - SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2013' THEN `Consumption` ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2012' THEN `Consumption` ELSE 0 END)\nFROM `yearmonth`\nWHERE\n  `CustomerID` = (\n    SELECT\n      `T1`.`CustomerID`\n    FROM `transactions_1k` AS `T1`\n    INNER JOIN `gasstations` AS `T2`\n      ON `T1`.`GasStationID` = `T2`.`GasStationID`\n    WHERE\n      `T1`.`Date` = '2012-08-25' AND `T1`.`Price`  = 1513.12   )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1339,
        "db_id": "student_club",
        "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
        "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10",
        "SQL": "SELECT\n  AVG(`T2`.`cost`)\nFROM `member` AS `T1`\nINNER JOIN `expense` AS `T2`\n  ON `T1`.`member_id` = `T2`.`link_to_member`\nWHERE\n  `T1`.`last_name` = 'Allen'\n  AND `T1`.`first_name` = 'Elijah'\n  AND (\n    SUBSTR(`T2`.`expense_date`, 6, 2) = '09'\n    OR SUBSTR(`T2`.`expense_date`, 6, 2) = '10'\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1359,
        "db_id": "student_club",
        "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T2`.`event_name` = 'Yearly Kickoff' THEN `T1`.`amount` ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `T2`.`event_name` = 'October Meeting' THEN `T1`.`amount` ELSE 0 END)\nFROM `budget` AS `T1`\nINNER JOIN `event` AS `T2`\n  ON `T1`.`link_to_event` = `T2`.`event_id`\nWHERE\n  `T1`.`category` = 'Advertisement' AND `T2`.`type` = 'Meeting'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1457,
        "db_id": "student_club",
        "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
        "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
        "SQL": "SELECT DISTINCT\n  `T3`.`first_name`,\n  `T3`.`last_name`,\n  `T3`.`phone`\nFROM `expense` AS `T1`\nINNER JOIN `budget` AS `T2`\n  ON `T1`.`link_to_budget` = `T2`.`budget_id`\nINNER JOIN `member` AS `T3`\n  ON `T3`.`member_id` = `T1`.`link_to_member`\nWHERE\n  `T1`.`cost` > (\n    SELECT\n      AVG(`T1`.`cost`)\n    FROM `expense` AS `T1`\n    INNER JOIN `budget` AS `T2`\n      ON `T1`.`link_to_budget` = `T2`.`budget_id`\n    INNER JOIN `member` AS `T3`\n      ON `T3`.`member_id` = `T1`.`link_to_member`\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1460,
        "db_id": "student_club",
        "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
        "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
        "SQL": "SELECT\n  `T2`.`first_name`,\n  `T2`.`last_name`,\n  `T1`.`cost`\nFROM `expense` AS `T1`\nINNER JOIN `member` AS `T2`\n  ON `T1`.`link_to_member` = `T2`.`member_id`\nWHERE\n  `T1`.`expense_description` = 'Water, Veggie tray, supplies'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1464,
        "db_id": "student_club",
        "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
        "evidence": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
        "SQL": "SELECT DISTINCT\n  `T3`.`first_name`,\n  `T3`.`last_name`,\n  `T4`.`amount`\nFROM `event` AS `T1`\nINNER JOIN `attendance` AS `T2`\n  ON `T1`.`event_id` = `T2`.`link_to_event`\nINNER JOIN `member` AS `T3`\n  ON `T3`.`member_id` = `T2`.`link_to_member`\nINNER JOIN `income` AS `T4`\n  ON `T4`.`link_to_member` = `T3`.`member_id`\nWHERE\n  `T4`.`date_received` = '2019-09-09'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1168,
        "db_id": "thrombosis_prediction",
        "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "SQL": "SELECT\n  `T1`.`Date`,\n  DATE_FORMAT(CAST(`T2`.`First Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T2`.`Birthday` AS DATETIME), '%Y'),\n  `T2`.`Birthday`\nFROM `Laboratory` AS `T1`\nINNER JOIN `Patient` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  `T2`.`Diagnosis` = 'SJS' AND NOT `T2`.`Birthday` IS NULL\nORDER BY\n  `T2`.`Birthday` ASC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1169,
        "db_id": "thrombosis_prediction",
        "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
        "evidence": "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T2`.`UA` <= 8.0 AND `T1`.`SEX` = 'M' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `T2`.`UA` <= 6.5 AND `T1`.`SEX` = 'F' THEN 1 ELSE 0 END)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`",
        "difficulty": "challenging"
    },
    {
        "question_id": 1171,
        "db_id": "thrombosis_prediction",
        "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
        "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
        "SQL": "SELECT\n  COUNT(`T1`.`ID`)\nFROM `Patient` AS `T1`\nINNER JOIN `Examination` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') BETWEEN '1990' AND '1993'\n  AND DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') < '18'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1185,
        "db_id": "thrombosis_prediction",
        "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
        "evidence": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = DIVISION(SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`)), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))",
        "SQL": "SELECT\n  CAST((\n    SUM(CASE WHEN `T2`.`Date` LIKE '1981-11-%' THEN `T2`.`T-CHO` ELSE 0 END) - SUM(CASE WHEN `T2`.`Date` LIKE '1981-12-%' THEN `T2`.`T-CHO` ELSE 0 END)\n  ) AS DOUBLE) / SUM(CASE WHEN `T2`.`Date` LIKE '1981-12-%' THEN `T2`.`T-CHO` ELSE 0 END)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  `T1`.`Birthday` = '1959-02-18'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1189,
        "db_id": "thrombosis_prediction",
        "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
        "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
        "SQL": "SELECT\n  COUNT(*)\nFROM `Examination`\nWHERE\n  `Thrombosis` = 2\n  AND `ANA Pattern` = 'S'\n  AND `aCL IgM` > (\n    SELECT\n      AVG(`aCL IgM`) * 1.2\n    FROM `Examination`\n    WHERE\n      `Thrombosis` = 2 AND `ANA Pattern` = 'S'\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1192,
        "db_id": "thrombosis_prediction",
        "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
        "evidence": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; ",
        "SQL": "SELECT DISTINCT\n  `T1`.`ID`\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  `T1`.`Admission` = '-' AND `T2`.`T-BIL` < 2.0 AND `T2`.`Date` LIKE '1991-10-%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1231,
        "db_id": "thrombosis_prediction",
        "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
        "evidence": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;",
        "SQL": "SELECT\n  COUNT(DISTINCT `T1`.`ID`)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') BETWEEN '1936' AND '1956'\n  AND `T1`.`SEX` = 'M'\n  AND `T2`.`CPK` >= 250",
        "difficulty": "challenging"
    },
    {
        "question_id": 1232,
        "db_id": "thrombosis_prediction",
        "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
        "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; ",
        "SQL": "SELECT DISTINCT\n  `T1`.`ID`,\n  `T1`.`SEX`,\n  DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y')\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  `T2`.`GLU` >= 180 AND `T2`.`T-CHO` < 250",
        "difficulty": "challenging"
    },
    {
        "question_id": 1239,
        "db_id": "thrombosis_prediction",
        "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
        "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
        "SQL": "SELECT DISTINCT\n  `T1`.`ID`,\n  DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y')\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  `T1`.`ID` IN (\n    SELECT\n      `ID`\n    FROM `Laboratory`\n    WHERE\n      `HCT` >= 52\n    GROUP BY\n      `ID`\n    HAVING\n      COUNT(`ID`) >= 2\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1241,
        "db_id": "thrombosis_prediction",
        "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
        "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
        "SQL": "SELECT\n  SUM(CASE WHEN `T2`.`PLT` <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`PLT` >= 400 THEN 1 ELSE 0 END)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`",
        "difficulty": "challenging"
    },
    {
        "question_id": 1242,
        "db_id": "thrombosis_prediction",
        "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
        "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
        "SQL": "SELECT DISTINCT\n  `T1`.`ID`\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  `T2`.`PLT` BETWEEN 100 AND 400\n  AND DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') < 50\n  AND DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') = '1984'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1243,
        "db_id": "thrombosis_prediction",
        "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
        "evidence": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T2`.`PT` >= 14 AND `T1`.`SEX` = 'F' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(CASE WHEN `T2`.`PT` >= 14 THEN 1 ELSE 0 END)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') > 55",
        "difficulty": "challenging"
    },
    {
        "question_id": 1247,
        "db_id": "thrombosis_prediction",
        "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
        "evidence": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
        "SQL": "SELECT\n  COUNT(DISTINCT `T1`.`ID`)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nWHERE\n  `T2`.`FG` <= 150\n  OR `T2`.`FG` >= 450\n  AND `T2`.`WBC` > 3.5\n  AND `T2`.`WBC` < 9.0\n  AND `T1`.`SEX` = 'M'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1257,
        "db_id": "thrombosis_prediction",
        "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
        "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND YEAR(CURDATE()) - YEAR(T1.Birthday) < 70",
        "difficulty": "challenging"
    },
    {
        "question_id": 1270,
        "db_id": "thrombosis_prediction",
        "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
        "evidence": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
        "SQL": "SELECT\n  COUNT(DISTINCT `T1`.`ID`)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nINNER JOIN `Examination` AS `T3`\n  ON `T3`.`ID` = `T2`.`ID`\nWHERE\n  (\n    `T2`.`SC170` = 'negative' OR `T2`.`SC170` = '0'\n  )\n  AND `T1`.`SEX` = 'F'\n  AND `T3`.`Symptoms` IS NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 1302,
        "db_id": "thrombosis_prediction",
        "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
        "evidence": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
        "SQL": "SELECT\n  COUNT(`T1`.`ID`)\nFROM `Patient` AS `T1`\nINNER JOIN `Laboratory` AS `T2`\n  ON `T1`.`ID` = `T2`.`ID`\nINNER JOIN `Examination` AS `T3`\n  ON `T1`.`ID` = `T3`.`ID`\nWHERE\n  `T2`.`CPK` < 250\n  AND (\n    `T3`.`KCT` = '+' OR `T3`.`RVVT` = '+' OR `T3`.`LAC` = '+'\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1028,
        "db_id": "european_football_2",
        "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
        "evidence": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));",
        "SQL": "SELECT\n  `teamInfo`.`team_long_name`\nFROM `League` AS `leagueData`\nINNER JOIN `Match` AS `matchData`\n  ON `leagueData`.`id` = `matchData`.`league_id`\nINNER JOIN `Team` AS `teamInfo`\n  ON `matchData`.`away_team_api_id` = `teamInfo`.`team_api_id`\nWHERE\n  `leagueData`.`name` = 'Scotland Premier League'\n  AND `matchData`.`season` = '2009/2010'\n  AND `matchData`.`away_team_goal` - `matchData`.`home_team_goal` > 0\nGROUP BY\n  `matchData`.`away_team_api_id`\nORDER BY\n  COUNT(*) DESC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1031,
        "db_id": "european_football_2",
        "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
        "evidence": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; ",
        "SQL": "SELECT DISTINCT YEAR(CURDATE()) - YEAR(t2.birthday) AS age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE YEAR(t1.`date`) BETWEEN 2013 AND 2015 AND t1.sprint_speed >= 97",
        "difficulty": "challenging"
    },
    {
        "question_id": 1036,
        "db_id": "european_football_2",
        "question": "List the long name of teams with above-average build-up play passing in 2012.",
        "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
        "SQL": "SELECT DISTINCT\n  `t4`.`team_long_name`\nFROM `Team_Attributes` AS `t3`\nINNER JOIN `Team` AS `t4`\n  ON `t3`.`team_api_id` = `t4`.`team_api_id`\nWHERE\n  SUBSTR(`t3`.`date`, 1, 4) = '2012'\n  AND `t3`.`buildUpPlayPassing` > (\n    SELECT\n      CAST(SUM(`t2`.`buildUpPlayPassing`) AS DOUBLE) / COUNT(`t1`.`id`)\n    FROM `Team` AS `t1`\n    INNER JOIN `Team_Attributes` AS `t2`\n      ON `t1`.`team_api_id` = `t2`.`team_api_id`\n    WHERE\n      DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') = '2012'\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 1037,
        "db_id": "european_football_2",
        "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
        "SQL": "SELECT\n  CAST(COUNT(CASE WHEN `t2`.`preferred_foot` = 'left' THEN `t1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`t1`.`id`) AS `percent`\nFROM `Player` AS `t1`\nINNER JOIN `Player_Attributes` AS `t2`\n  ON `t1`.`player_api_id` = `t2`.`player_api_id`\nWHERE\n  SUBSTR(`t1`.`birthday`, 1, 4) BETWEEN '1987' AND '1992'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1042,
        "db_id": "european_football_2",
        "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
        "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'",
        "SQL": "SELECT\n  `t1`.`name`\nFROM `League` AS `t1`\nINNER JOIN `Match` AS `t2`\n  ON `t1`.`id` = `t2`.`league_id`\nWHERE\n  `t2`.`season` = '2009/2010'\nGROUP BY\n  `t1`.`name`\nHAVING\n  (\n    CAST(SUM(`t2`.`home_team_goal`) AS DOUBLE) / COUNT(DISTINCT `t2`.`id`)\n  ) - (\n    CAST(SUM(`t2`.`away_team_goal`) AS DOUBLE) / COUNT(DISTINCT `t2`.`id`)\n  ) > 0",
        "difficulty": "challenging"
    },
    {
        "question_id": 1058,
        "db_id": "european_football_2",
        "question": "Who has the highest average finishing rate between the highest and shortest football player?",
        "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
        "SQL": "SELECT `A` FROM (SELECT AVG(`finishing`) AS `result`, 'Max' AS `A` FROM `Player` AS `T1` INNER JOIN `Player_Attributes` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T1`.`height` = (SELECT MAX(`height`) FROM `Player`) UNION SELECT AVG(`finishing`) AS `result`, 'Min' AS `A` FROM `Player` AS `T1` INNER JOIN `Player_Attributes` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T1`.`height` = (SELECT MIN(`height`) FROM `Player`)) AS `derived` ORDER BY `result` DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1076,
        "db_id": "european_football_2",
        "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
        "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
        "SQL": "SELECT\n  CAST(SUM(\n    CASE WHEN `t1`.`player_name` = 'Abdou Diallo' THEN `t2`.`ball_control` ELSE 0 END\n  ) AS DOUBLE) / COUNT(CASE WHEN `t1`.`player_name` = 'Abdou Diallo' THEN `t2`.`id` ELSE NULL END) - CAST(SUM(\n    CASE\n      WHEN `t1`.`player_name` = 'Aaron Appindangoye'\n      THEN `t2`.`ball_control`\n      ELSE 0\n    END\n  ) AS DOUBLE) / COUNT(CASE WHEN `t1`.`player_name` = 'Aaron Appindangoye' THEN `t2`.`id` ELSE NULL END)\nFROM `Player` AS `t1`\nINNER JOIN `Player_Attributes` AS `t2`\n  ON `t1`.`player_api_id` = `t2`.`player_api_id`",
        "difficulty": "challenging"
    },
    {
        "question_id": 1084,
        "db_id": "european_football_2",
        "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
        "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;",
        "SQL": "SELECT\n  COUNT(DISTINCT `t1`.`player_name`)\nFROM `Player` AS `t1`\nINNER JOIN `Player_Attributes` AS `t2`\n  ON `t1`.`player_api_id` = `t2`.`player_api_id`\nWHERE\n  DATE_FORMAT(CAST(`t1`.`birthday` AS DATETIME), '%Y') < '1986'\n  AND `t2`.`defensive_work_rate` = 'high'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1094,
        "db_id": "european_football_2",
        "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
        "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
        "SQL": "SELECT\n  (\n    SUM(\n      CASE\n        WHEN `t1`.`player_name` = 'Ariel Borysiuk'\n        THEN `t2`.`overall_rating`\n        ELSE 0\n      END\n    ) * 1.0 - SUM(\n      CASE WHEN `t1`.`player_name` = 'Paulin Puel' THEN `t2`.`overall_rating` ELSE 0 END\n    )\n  ) * 100 / SUM(\n    CASE WHEN `t1`.`player_name` = 'Paulin Puel' THEN `t2`.`overall_rating` ELSE 0 END\n  )\nFROM `Player` AS `t1`\nINNER JOIN `Player_Attributes` AS `t2`\n  ON `t1`.`player_api_id` = `t2`.`player_api_id`",
        "difficulty": "challenging"
    },
    {
        "question_id": 1114,
        "db_id": "european_football_2",
        "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
        "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'",
        "SQL": "SELECT\n  CAST(SUM(`t2`.`overall_rating`) AS DOUBLE) / COUNT(`t2`.`id`)\nFROM `Player` AS `t1`\nINNER JOIN `Player_Attributes` AS `t2`\n  ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id`\nWHERE\n  `t1`.`player_name` = 'Marko Arnautovic'\n  AND SUBSTR(`t2`.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1115,
        "db_id": "european_football_2",
        "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
        "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
        "SQL": "SELECT\n  (\n    SUM(\n      CASE\n        WHEN `t1`.`player_name` = 'Landon Donovan'\n        THEN `t2`.`overall_rating`\n        ELSE 0\n      END\n    ) * 1.0 - SUM(\n      CASE WHEN `t1`.`player_name` = 'Jordan Bowery' THEN `t2`.`overall_rating` ELSE 0 END\n    )\n  ) * 100 / SUM(\n    CASE\n      WHEN `t1`.`player_name` = 'Landon Donovan'\n      THEN `t2`.`overall_rating`\n      ELSE 0\n    END\n  ) AS `LvsJ_percent`\nFROM `Player` AS `t1`\nINNER JOIN `Player_Attributes` AS `t2`\n  ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id`\nWHERE\n  SUBSTR(`t2`.`date`, 1, 10) = '2013-07-12'",
        "difficulty": "challenging"
    },
    {
        "question_id": 1139,
        "db_id": "european_football_2",
        "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
        "evidence": "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal",
        "SQL": "SELECT\n  `t2`.`home_team_goal`,\n  `t2`.`away_team_goal`\nFROM `League` AS `t1`\nINNER JOIN `Match` AS `t2`\n  ON `t1`.`id` = `t2`.`league_id`\nWHERE\n  `t1`.`name` = 'Belgium Jupiler League' AND `t2`.`date` LIKE '2008-09-24%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 880,
        "db_id": "formula_1",
        "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
        "SQL": "SELECT\n  (\n    SUM(CASE WHEN `T2`.`raceId` = 853 THEN `T2`.`fastestLapSpeed` ELSE 0 END) - SUM(CASE WHEN `T2`.`raceId` = 854 THEN `T2`.`fastestLapSpeed` ELSE 0 END)\n  ) * 100 / SUM(CASE WHEN `T2`.`raceId` = 853 THEN `T2`.`fastestLapSpeed` ELSE 0 END)\nFROM `drivers` AS `T1`\nINNER JOIN `results` AS `T2`\n  ON `T2`.`driverId` = `T1`.`driverId`\nWHERE\n  `T1`.`forename` = 'Paul' AND `T1`.`surname` = 'di Resta'",
        "difficulty": "challenging"
    },
    {
        "question_id": 896,
        "db_id": "formula_1",
        "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
        "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
        "SQL": "SELECT\n  CAST(COUNT(CASE WHEN `T2`.`position` <> 1 THEN `T2`.`position` END) AS DOUBLE) * 100 / COUNT(`T2`.`driverStandingsId`)\nFROM `races` AS `T1`\nINNER JOIN `driverStandings` AS `T2`\n  ON `T2`.`raceId` = `T1`.`raceId`\nINNER JOIN `drivers` AS `T3`\n  ON `T3`.`driverId` = `T2`.`driverId`\nWHERE\n  `T3`.`surname` = 'Hamilton' AND `T1`.`year` >= 2010",
        "difficulty": "challenging"
    },
    {
        "question_id": 944,
        "db_id": "formula_1",
        "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
        "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
        "SQL": "WITH `time_in_seconds` AS (\n  SELECT\n    `T1`.`positionOrder`,\n    CASE\n      WHEN `T1`.`positionOrder` = 1\n      THEN (\n        CAST(SUBSTR(`T1`.`time`, 1, 1) AS DOUBLE) * 3600\n      ) + (\n        CAST(SUBSTR(`T1`.`time`, 3, 2) AS DOUBLE) * 60\n      ) + CAST(SUBSTR(`T1`.`time`, 6) AS DOUBLE)\n      ELSE CAST(SUBSTR(`T1`.`time`, 2) AS DOUBLE)\n    END AS `time_seconds`\n  FROM `results` AS `T1`\n  INNER JOIN `races` AS `T2`\n    ON `T1`.`raceId` = `T2`.`raceId`\n  WHERE\n    `T2`.`name` = 'Australian Grand Prix'\n    AND NOT `T1`.`time` IS NULL\n    AND `T2`.`year` = 2008\n), `champion_time` AS (\n  SELECT\n    `time_seconds`\n  FROM `time_in_seconds`\n  WHERE\n    `positionOrder` = 1\n), `last_driver_incremental` AS (\n  SELECT\n    `time_seconds`\n  FROM `time_in_seconds`\n  WHERE\n    `positionOrder` = (\n      SELECT\n        MAX(`positionOrder`)\n      FROM `time_in_seconds`\n    )\n)\nSELECT\n  (\n    CAST((\n      SELECT\n        `time_seconds`\n      FROM `last_driver_incremental`\n    ) AS DOUBLE) * 100\n  ) / (\n    SELECT\n      `time_seconds` + (\n        SELECT\n          `time_seconds`\n        FROM `last_driver_incremental`\n      )\n    FROM `champion_time`\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 954,
        "db_id": "formula_1",
        "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
        "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN NOT `T1`.`time` IS NULL THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`raceId`)\nFROM `results` AS `T1`\nINNER JOIN `races` AS `T2`\n  ON `T1`.`raceId` = `T2`.`raceId`\nINNER JOIN `drivers` AS `T3`\n  ON `T1`.`driverId` = `T3`.`driverId`\nWHERE\n  `T3`.`nationality` = 'Japanese' AND `T2`.`year` BETWEEN 2007 AND 2009",
        "difficulty": "challenging"
    },
    {
        "question_id": 955,
        "db_id": "formula_1",
        "question": "What is the average time in seconds of champion for each year, before year 1975?",
        "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
        "SQL": "WITH time_in_seconds AS (SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS FLOAT) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS FLOAT) * 60) + CAST(SUBSTR(T1.time, 6, 2) AS FLOAT) + CAST(SUBSTR(T1.time, 9) AS FLOAT) / 1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE NOT T1.time IS NULL), champion_time AS (SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING NOT AVG(time_seconds) IS NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 962,
        "db_id": "formula_1",
        "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
        "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
        "SQL": "SELECT\n  CAST(SUM(\n    CASE\n      WHEN DATE_FORMAT(CAST(`T3`.`dob` AS DATETIME), '%Y') < '1985' AND `T1`.`laps` > 50\n      THEN 1\n      ELSE 0\n    END\n  ) AS DOUBLE) * 100 / COUNT(*)\nFROM `results` AS `T1`\nINNER JOIN `races` AS `T2`\n  ON `T1`.`raceId` = `T2`.`raceId`\nINNER JOIN `drivers` AS `T3`\n  ON `T1`.`driverId` = `T3`.`driverId`\nWHERE\n  `T2`.`year` BETWEEN 2000 AND 2005",
        "difficulty": "challenging"
    },
    {
        "question_id": 988,
        "db_id": "formula_1",
        "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980<= year(dob) <=1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "SQL": "SELECT\n  `T2`.`forename`,\n  `T2`.`surname`\nFROM `pitStops` AS `T1`\nINNER JOIN `drivers` AS `T2`\n  ON `T1`.`driverId` = `T2`.`driverId`\nWHERE\n  `T2`.`nationality` = 'German'\n  AND DATE_FORMAT(CAST(`T2`.`dob` AS DATETIME), '%Y') BETWEEN '1980' AND '1985'\nGROUP BY\n  `T2`.`forename`,\n  `T2`.`surname`\nORDER BY\n  AVG(`T1`.`duration`)\nLIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 990,
        "db_id": "formula_1",
        "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
        "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
        "SQL": "SELECT\n  `T3`.`constructorRef`,\n  `T3`.`url`\nFROM `results` AS `T1`\nINNER JOIN `races` AS `T2`\n  ON `T1`.`raceId` = `T2`.`raceId`\nINNER JOIN `constructors` AS `T3`\n  ON `T1`.`constructorId` = `T3`.`constructorId`\nWHERE\n  `T2`.`name` = 'Singapore Grand Prix'\n  AND `T2`.`year` = 2009\n  AND `T1`.`time` LIKE '_:%:__.___'",
        "difficulty": "challenging"
    },
    {
        "question_id": 994,
        "db_id": "formula_1",
        "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
        "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
        "SQL": "SELECT\n  SUM(`T1`.`points`),\n  `T2`.`name`,\n  `T2`.`nationality`\nFROM `constructorResults` AS `T1`\nINNER JOIN `constructors` AS `T2`\n  ON `T1`.`constructorId` = `T2`.`constructorId`\nINNER JOIN `races` AS `T3`\n  ON `T3`.`raceid` = `T1`.`raceid`\nWHERE\n  `T3`.`name` = 'Monaco Grand Prix' AND `T3`.`year` BETWEEN 1980 AND 2010\nGROUP BY\n  `T2`.`name`\nORDER BY\n  SUM(`T1`.`points`) DESC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1001,
        "db_id": "formula_1",
        "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
        "SQL": "SELECT\n  `T2`.`forename`,\n  `T2`.`surname`\nFROM `qualifying` AS `T1`\nINNER JOIN `drivers` AS `T2`\n  ON `T1`.`driverId` = `T2`.`driverId`\nINNER JOIN `races` AS `T3`\n  ON `T1`.`raceid` = `T3`.`raceid`\nWHERE\n  NOT `q3` IS NULL\n  AND `T3`.`year` = 2008\n  AND `T3`.`circuitId` IN (\n    SELECT\n      `circuitId`\n    FROM `circuits`\n    WHERE\n      `name` = 'Marina Bay Street Circuit'\n  )\nORDER BY\n  CAST(SUBSTR(`q3`, 1, INSTR(`q3`, ':') - 1) AS SIGNED) * 60 + CAST(SUBSTR(`q3`, INSTR(`q3`, ':') + 1, INSTR(`q3`, '.') - INSTR(`q3`, ':') - 1) AS DOUBLE) + CAST(SUBSTR(`q3`, INSTR(`q3`, '.') + 1) AS DOUBLE) / 1000 ASC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 1011,
        "db_id": "formula_1",
        "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
        "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
        "SQL": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS FLOAT) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS FLOAT) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS FLOAT) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "difficulty": "challenging"
    },
    {
        "question_id": 1014,
        "db_id": "formula_1",
        "question": "Please list the lap records for the circuits in Italy.",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "SQL": "WITH `fastest_lap_times` AS (\n  SELECT\n    `T1`.`raceId`,\n    `T1`.`FastestLapTime`,\n    (\n      CAST(SUBSTR(`T1`.`FastestLapTime`, 1, INSTR(`T1`.`FastestLapTime`, ':') - 1) AS DOUBLE) * 60\n    ) + (\n      CAST(SUBSTR(\n        `T1`.`FastestLapTime`,\n        INSTR(`T1`.`FastestLapTime`, ':') + 1,\n        INSTR(`T1`.`FastestLapTime`, '.') - INSTR(`T1`.`FastestLapTime`, ':') - 1\n      ) AS DOUBLE)\n    ) + (\n      CAST(SUBSTR(`T1`.`FastestLapTime`, INSTR(`T1`.`FastestLapTime`, '.') + 1) AS DOUBLE) / 1000\n    ) AS `time_in_seconds`\n  FROM `results` AS `T1`\n  WHERE\n    NOT `T1`.`FastestLapTime` IS NULL\n)\nSELECT\n  `T1`.`FastestLapTime` AS `lap_record`\nFROM `results` AS `T1`\nINNER JOIN `races` AS `T2`\n  ON `T1`.`raceId` = `T2`.`raceId`\nINNER JOIN `circuits` AS `T3`\n  ON `T2`.`circuitId` = `T3`.`circuitId`\nINNER JOIN (\n  SELECT\n    MIN(`fastest_lap_times`.`time_in_seconds`) AS `min_time_in_seconds`\n  FROM `fastest_lap_times`\n  INNER JOIN `races` AS `T2`\n    ON `fastest_lap_times`.`raceId` = `T2`.`raceId`\n  INNER JOIN `circuits` AS `T3`\n    ON `T2`.`circuitId` = `T3`.`circuitId`\n  WHERE\n    `T3`.`country` = 'Italy'\n) AS `T4`\n  ON (\n    CAST(SUBSTR(`T1`.`FastestLapTime`, 1, INSTR(`T1`.`FastestLapTime`, ':') - 1) AS DOUBLE) * 60\n  ) + (\n    CAST(SUBSTR(\n      `T1`.`FastestLapTime`,\n      INSTR(`T1`.`FastestLapTime`, ':') + 1,\n      INSTR(`T1`.`FastestLapTime`, '.') - INSTR(`T1`.`FastestLapTime`, ':') - 1\n    ) AS DOUBLE)\n  ) + (\n    CAST(SUBSTR(`T1`.`FastestLapTime`, INSTR(`T1`.`FastestLapTime`, '.') + 1) AS DOUBLE) / 1000\n  ) = `T4`.`min_time_in_seconds`\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 724,
        "db_id": "superhero",
        "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "SQL": "SELECT\n  `T1`.`superhero_name`\nFROM `superhero` AS `T1`\nINNER JOIN `colour` AS `T2`\n  ON `T1`.`eye_colour_id` = `T2`.`id`\nINNER JOIN `colour` AS `T3`\n  ON `T1`.`hair_colour_id` = `T3`.`id`\nWHERE\n  `T2`.`colour` = 'Blue' AND `T3`.`colour` = 'Blond'",
        "difficulty": "challenging"
    },
    {
        "question_id": 730,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT\n  `superhero_name`\nFROM `superhero` AS `T1`\nWHERE\n  EXISTS(\n    SELECT\n      1\n    FROM `hero_power` AS `T2`\n    INNER JOIN `superpower` AS `T3`\n      ON `T2`.`power_id` = `T3`.`id`\n    WHERE\n      `T3`.`power_name` = 'Super Strength' AND `T1`.`id` = `T2`.`hero_id`\n  )\n  AND EXISTS(\n    SELECT\n      1\n    FROM `publisher` AS `T4`\n    WHERE\n      `T4`.`publisher_name` = 'Marvel Comics' AND `T1`.`publisher_id` = `T4`.`id`\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 743,
        "db_id": "superhero",
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
        "SQL": "SELECT\n  (\n    CAST(COUNT(*) AS DOUBLE) * 100 / (\n      SELECT\n        COUNT(*)\n      FROM `superhero`\n    )\n  ),\n  CAST(SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) AS DOUBLE)\nFROM `superhero` AS `T1`\nINNER JOIN `publisher` AS `T2`\n  ON `T1`.`publisher_id` = `T2`.`id`\nINNER JOIN `alignment` AS `T3`\n  ON `T3`.`id` = `T1`.`alignment_id`\nWHERE\n  `T3`.`alignment` = 'Bad'",
        "difficulty": "challenging"
    },
    {
        "question_id": 744,
        "db_id": "superhero",
        "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
        "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))",
        "SQL": "SELECT\n  SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`publisher_name` = 'DC Comics' THEN 1 ELSE 0 END)\nFROM `superhero` AS `T1`\nINNER JOIN `publisher` AS `T2`\n  ON `T1`.`publisher_id` = `T2`.`id`",
        "difficulty": "challenging"
    },
    {
        "question_id": 760,
        "db_id": "superhero",
        "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
        "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)",
        "SQL": "SELECT\n  CAST(COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`)\nFROM `superhero` AS `T1`\nINNER JOIN `publisher` AS `T2`\n  ON `T1`.`publisher_id` = `T2`.`id`\nWHERE\n  `T1`.`height_cm` BETWEEN 150 AND 180",
        "difficulty": "challenging"
    },
    {
        "question_id": 769,
        "db_id": "superhero",
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT\n  `T1`.`superhero_name`\nFROM `superhero` AS `T1`\nINNER JOIN `hero_attribute` AS `T2`\n  ON `T1`.`id` = `T2`.`hero_id`\nINNER JOIN `attribute` AS `T3`\n  ON `T3`.`id` = `T2`.`attribute_id`\nINNER JOIN `publisher` AS `T4`\n  ON `T4`.`id` = `T1`.`publisher_id`\nWHERE\n  `T4`.`publisher_name` = 'Dark Horse Comics'\n  AND `T3`.`attribute_name` = 'Durability'\nORDER BY\n  `T2`.`attribute_value` DESC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 772,
        "db_id": "superhero",
        "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
        "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT\n  `T1`.`eye_colour_id`,\n  `T1`.`hair_colour_id`,\n  `T1`.`skin_colour_id`\nFROM `superhero` AS `T1`\nINNER JOIN `publisher` AS `T2`\n  ON `T2`.`id` = `T1`.`publisher_id`\nINNER JOIN `gender` AS `T3`\n  ON `T3`.`id` = `T1`.`gender_id`\nWHERE\n  `T2`.`publisher_name` = 'Dark Horse Comics' AND `T3`.`gender` = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question_id": 773,
        "db_id": "superhero",
        "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
        "evidence": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;",
        "SQL": "SELECT\n  `T1`.`superhero_name`,\n  `T2`.`publisher_name`\nFROM `superhero` AS `T1`\nINNER JOIN `publisher` AS `T2`\n  ON `T1`.`publisher_id` = `T2`.`id`\nWHERE\n  `T1`.`eye_colour_id` = `T1`.`hair_colour_id`\n  AND `T1`.`eye_colour_id` = `T1`.`skin_colour_id`",
        "difficulty": "challenging"
    },
    {
        "question_id": 775,
        "db_id": "superhero",
        "question": "What is the percentage of blue female superheroes among all female superheroes?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';",
        "SQL": "SELECT\n  CAST(COUNT(CASE WHEN `T3`.`colour` = 'Blue' THEN `T1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`)\nFROM `superhero` AS `T1`\nINNER JOIN `gender` AS `T2`\n  ON `T1`.`gender_id` = `T2`.`id`\nINNER JOIN `colour` AS `T3`\n  ON `T1`.`skin_colour_id` = `T3`.`id`\nWHERE\n  `T2`.`gender` = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question_id": 788,
        "db_id": "superhero",
        "question": "How many percent of female heroes were published by Marvel Comics?",
        "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
        "SQL": "SELECT\n  CAST(COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' AND `T3`.`gender` = 'Female' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE NULL END)\nFROM `superhero` AS `T1`\nINNER JOIN `publisher` AS `T2`\n  ON `T1`.`publisher_id` = `T2`.`id`\nINNER JOIN `gender` AS `T3`\n  ON `T1`.`gender_id` = `T3`.`id`\n",
        "difficulty": "challenging"
    },
    {
        "question_id": 819,
        "db_id": "superhero",
        "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
        "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
        "SQL": "SELECT\n  SUM(CASE WHEN `T2`.`id` = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`id` = 1 THEN 1 ELSE 0 END)\nFROM `superhero` AS `T1`\nINNER JOIN `colour` AS `T2`\n  ON `T1`.`eye_colour_id` = `T2`.`id`\nWHERE\n  `T1`.`weight_kg` = 0 OR `T1`.`weight_kg` IS NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 829,
        "db_id": "superhero",
        "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
        "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
        "SQL": "SELECT\n  SUM(CASE WHEN `T2`.`publisher_name` = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END)\nFROM `superhero` AS `T1`\nINNER JOIN `publisher` AS `T2`\n  ON `T1`.`publisher_id` = `T2`.`id`",
        "difficulty": "challenging"
    },
    {
        "question_id": 586,
        "db_id": "codebase_community",
        "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "evidence": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
        "SQL": "SELECT\n  `T3`.`DisplayName`,\n  `T1`.`Title`\nFROM `posts` AS `T1`\nINNER JOIN `votes` AS `T2`\n  ON `T1`.`Id` = `T2`.`PostId`\nINNER JOIN `users` AS `T3`\n  ON `T3`.`Id` = `T2`.`UserId`\nWHERE\n  `T2`.`BountyAmount` = 50 AND `T1`.`Title` LIKE '%variance%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 598,
        "db_id": "codebase_community",
        "question": "What is the percentage difference of student badges given during 2010 and 2011?",
        "evidence": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN DATE_FORMAT(CAST(`Date` AS DATETIME), '%Y') = '2010' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`Id`) - CAST(SUM(CASE WHEN DATE_FORMAT(CAST(`Date` AS DATETIME), '%Y') = '2011' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`Id`)\nFROM `badges`\nWHERE\n  `Name` = 'Student'",
        "difficulty": "challenging"
    },
    {
        "question_id": 634,
        "db_id": "codebase_community",
        "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT\n  `T1`.`DisplayName`\nFROM `users` AS `T1`\nINNER JOIN `postHistory` AS `T2`\n  ON `T1`.`Id` = `T2`.`UserId`\nINNER JOIN `posts` AS `T3`\n  ON `T2`.`PostId` = `T3`.`Id`\nWHERE\n  `T1`.`DisplayName` = 'Harvey Motulsky' OR `T1`.`DisplayName` = 'Noah Snyder'\nGROUP BY\n  `T1`.`DisplayName`\nORDER BY\n  SUM(`T3`.`ViewCount`) DESC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 639,
        "db_id": "codebase_community",
        "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T3`.`TagName` = 'r' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`)\nFROM `users` AS `T1`\nINNER JOIN `postHistory` AS `T2`\n  ON `T1`.`Id` = `T2`.`UserId`\nINNER JOIN `tags` AS `T3`\n  ON `T3`.`ExcerptPostId` = `T2`.`PostId`\nWHERE\n  `T1`.`DisplayName` = 'Community'",
        "difficulty": "challenging"
    },
    {
        "question_id": 701,
        "db_id": "codebase_community",
        "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
        "evidence": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T2`.`Score` > 50 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`)\nFROM `users` AS `T1`\nINNER JOIN `posts` AS `T2`\n  ON `T1`.`Id` = `T2`.`OwnerUserId`\nINNER JOIN (\n  SELECT\n    MAX(`Reputation`) AS `max_reputation`\n  FROM `users`\n) AS `T3`\n  ON `T1`.`Reputation` = `T3`.`max_reputation`",
        "difficulty": "challenging"
    },
    {
        "question_id": 371,
        "db_id": "card_games",
        "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
        "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T2`.`language` = 'French' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`)\nFROM `cards` AS `T1`\nINNER JOIN `foreign_data` AS `T2`\n  ON `T1`.`uuid` = `T2`.`uuid`\nWHERE\n  `T1`.`isStorySpotlight` = 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 415,
        "db_id": "card_games",
        "question": "What percentage of cards with format commander and legal status do not have a content warning?",
        "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T1`.`hasContentWarning` = 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`)\nFROM `cards` AS `T1`\nINNER JOIN `legalities` AS `T2`\n  ON `T1`.`uuid` = `T2`.`uuid`\nWHERE\n  `T2`.`format` = 'commander' AND `T2`.`status` = 'Legal'",
        "difficulty": "challenging"
    },
    {
        "question_id": 416,
        "db_id": "card_games",
        "question": "What percentage of cards without power are in French?",
        "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
        "SQL": "SELECT\n  CAST(SUM(CASE WHEN `T2`.`language` = 'French' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`)\nFROM `cards` AS `T1`\nINNER JOIN `foreign_data` AS `T2`\n  ON `T1`.`uuid` = `T2`.`uuid`\nWHERE\n  `T1`.`power` IS NULL OR `T1`.`power` = '*'",
        "difficulty": "challenging"
    },
    {
        "question_id": 477,
        "db_id": "card_games",
        "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "SQL": "SELECT\n  `T1`.`artist`\nFROM `cards` AS `T1`\nINNER JOIN `sets` AS `T2`\n  ON `T2`.`code` = `T1`.`setCode`\nWHERE\n  (\n    `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Chippy'\n  )\n  OR (\n    `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Aaron Miller'\n  )\n  OR (\n    `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Jeremy Jarvis'\n  )\nGROUP BY\n  `T1`.`artist`",
        "difficulty": "challenging"
    },
    {
        "question_id": 487,
        "db_id": "card_games",
        "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
        "SQL": "SELECT\n  CAST(SUM(\n    CASE\n      WHEN NOT `T1`.`cardKingdomFoilId` IS NULL AND NOT `T1`.`cardKingdomId` IS NULL\n      THEN 1\n      ELSE 0\n    END\n  ) AS DOUBLE) * 100 / COUNT(`T1`.`id`)\nFROM `cards` AS `T1`\nINNER JOIN `sets` AS `T2`\n  ON `T2`.`code` = `T1`.`setCode`\nWHERE\n  `T2`.`name` = 'Coldsnap'",
        "difficulty": "challenging"
    },
    {
        "question_id": 528,
        "db_id": "card_games",
        "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
        "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format",
        "SQL": "SELECT DISTINCT\n  `T2`.`name`,\n  CASE WHEN `T1`.`status` = 'Legal' THEN `T1`.`format` ELSE NULL END\nFROM `legalities` AS `T1`\nINNER JOIN `cards` AS `T2`\n  ON `T2`.`uuid` = `T1`.`uuid`\nWHERE\n  `T2`.`setCode` IN (\n    SELECT\n      `code`\n    FROM `sets`\n    WHERE\n      `name` = 'Hour of Devastation'\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 198,
        "db_id": "toxicology",
        "question": "On average how many carcinogenic molecules are single bonded?",
        "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
        "SQL": "SELECT\n  AVG(`single_bond_count`)\nFROM (\n  SELECT\n    `T3`.`molecule_id`,\n    COUNT(`T1`.`bond_type`) AS `single_bond_count`\n  FROM `bond` AS `T1`\n  INNER JOIN `atom` AS `T2`\n    ON `T1`.`molecule_id` = `T2`.`molecule_id`\n  INNER JOIN `molecule` AS `T3`\n    ON `T3`.`molecule_id` = `T2`.`molecule_id`\n  WHERE\n    `T1`.`bond_type` = '-' AND `T3`.`label` = '+'\n  GROUP BY\n    `T3`.`molecule_id`\n) AS `subquery`",
        "difficulty": "challenging"
    },
    {
        "question_id": 206,
        "db_id": "toxicology",
        "question": "What elements are in the TR004_8_9 bond atoms?",
        "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
        "SQL": "SELECT DISTINCT\n  `T1`.`element`\nFROM `atom` AS `T1`\nINNER JOIN `connected` AS `T2`\n  ON `T1`.`atom_id` = `T2`.`atom_id`\nWHERE\n  `T2`.`bond_id` = 'TR004_8_9'",
        "difficulty": "challenging"
    },
    {
        "question_id": 207,
        "db_id": "toxicology",
        "question": "What elements are in a double type bond?",
        "evidence": "double type bond refers to bond_type = '=';",
        "SQL": "SELECT DISTINCT\n  `T1`.`element`\nFROM `atom` AS `T1`\nINNER JOIN `bond` AS `T2`\n  ON `T1`.`molecule_id` = `T2`.`molecule_id`\nINNER JOIN `connected` AS `T3`\n  ON `T1`.`atom_id` = `T3`.`atom_id`\nWHERE\n  `T2`.`bond_type` = '='",
        "difficulty": "challenging"
    },
    {
        "question_id": 212,
        "db_id": "toxicology",
        "question": "Which element is the least numerous in non-carcinogenic molecules?",
        "evidence": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));",
        "SQL": "SELECT\n  `T`.`element`\nFROM (\n  SELECT\n    `T1`.`element`,\n    COUNT(DISTINCT `T1`.`molecule_id`)\n  FROM `atom` AS `T1`\n  INNER JOIN `molecule` AS `T2`\n    ON `T1`.`molecule_id` = `T2`.`molecule_id`\n  WHERE\n    `T2`.`label` = '-'\n  GROUP BY\n    `T1`.`element`\n  ORDER BY\n    COUNT(DISTINCT `T1`.`molecule_id`) ASC\n  LIMIT 1\n) AS `t`",
        "difficulty": "challenging"
    },
    {
        "question_id": 215,
        "db_id": "toxicology",
        "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
        "SQL": "SELECT\n  COUNT(DISTINCT CASE WHEN `T1`.`element` = 'i' THEN `T1`.`atom_id` ELSE NULL END) AS `iodine_nums`,\n  COUNT(DISTINCT CASE WHEN `T1`.`element` = 's' THEN `T1`.`atom_id` ELSE NULL END) AS `sulfur_nums`\nFROM `atom` AS `T1`\nINNER JOIN `connected` AS `T2`\n  ON `T1`.`atom_id` = `T2`.`atom_id`\nINNER JOIN `bond` AS `T3`\n  ON `T2`.`bond_id` = `T3`.`bond_id`\nWHERE\n  `T3`.`bond_type` = '-'",
        "difficulty": "challenging"
    },
    {
        "question_id": 218,
        "db_id": "toxicology",
        "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
        "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
        "SQL": "SELECT\n  CAST(COUNT(DISTINCT CASE WHEN `T1`.`element` <> 'f' THEN `T2`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T2`.`molecule_id`)\nFROM `atom` AS `T1`\nINNER JOIN `molecule` AS `T2`\n  ON `T1`.`molecule_id` = `T2`.`molecule_id`\nWHERE\n  `T2`.`label` = '+'",
        "difficulty": "challenging"
    },
    {
        "question_id": 219,
        "db_id": "toxicology",
        "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
        "SQL": "SELECT\n  CAST(COUNT(DISTINCT CASE WHEN `T2`.`label` = '+' THEN `T2`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T2`.`molecule_id`)\nFROM `atom` AS `T1`\nINNER JOIN `molecule` AS `T2`\n  ON `T1`.`molecule_id` = `T2`.`molecule_id`\nINNER JOIN `bond` AS `T3`\n  ON `T2`.`molecule_id` = `T3`.`molecule_id`\nWHERE\n  `T3`.`bond_type` = '#'",
        "difficulty": "challenging"
    },
    {
        "question_id": 220,
        "db_id": "toxicology",
        "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
        "evidence": "TR000 is the molecule id;",
        "SQL": "SELECT DISTINCT\n  `T`.`element`\nFROM `atom` AS `T`\nWHERE\n  `T`.`molecule_id` = 'TR000'\nORDER BY\n  `T`.`element`\nLIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 230,
        "db_id": "toxicology",
        "question": "What are the elements of the toxicology and label of molecule TR060?",
        "evidence": "TR060 is the molecule id; ",
        "SQL": "SELECT DISTINCT\n  `T1`.`element`,\n  `T2`.`label`\nFROM `atom` AS `T1`\nINNER JOIN `molecule` AS `T2`\n  ON `T1`.`molecule_id` = `T2`.`molecule_id`\nWHERE\n  `T2`.`molecule_id` = 'TR060'",
        "difficulty": "challenging"
    },
    {
        "question_id": 231,
        "db_id": "toxicology",
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
        "SQL": "SELECT\n  `T`.`bond_type`\nFROM (\n  SELECT\n    `T1`.`bond_type`,\n    COUNT(`T1`.`molecule_id`)\n  FROM `bond` AS `T1`\n  WHERE\n    `T1`.`molecule_id` = 'TR010'\n  GROUP BY\n    `T1`.`bond_type`\n  ORDER BY\n    COUNT(`T1`.`molecule_id`) DESC\n  LIMIT 1\n) AS `T`",
        "difficulty": "challenging"
    },
    {
        "question_id": 240,
        "db_id": "toxicology",
        "question": "List all the elements of the toxicology of the molecule \"TR004\".",
        "evidence": "TR004 is the molecule id;",
        "SQL": "SELECT DISTINCT\n  `T`.`element`\nFROM `atom` AS `T`\nWHERE\n  `T`.`molecule_id` = 'TR004'",
        "difficulty": "challenging"
    },
    {
        "question_id": 247,
        "db_id": "toxicology",
        "question": "List all the elements of atoms that can not bond with any other atoms.",
        "evidence": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
        "SQL": "SELECT DISTINCT\n  `T`.`element`\nFROM `atom` AS `T`\nWHERE\n  NOT `T`.`element` IN (\n    SELECT DISTINCT\n      `T1`.`element`\n    FROM `atom` AS `T1`\n    INNER JOIN `connected` AS `T2`\n      ON `T1`.`atom_id` = `T2`.`atom_id`\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 249,
        "db_id": "toxicology",
        "question": "What are the elements of the atoms of TR144_8_19?",
        "evidence": "TR144_8_19 is the bond id; ",
        "SQL": "SELECT\n  `T2`.`element`\nFROM `connected` AS `T1`\nINNER JOIN `atom` AS `T2`\n  ON `T1`.`atom_id` = `T2`.`atom_id`\nWHERE\n  `T1`.`bond_id` = 'TR144_8_19'",
        "difficulty": "challenging"
    },
    {
        "question_id": 253,
        "db_id": "toxicology",
        "question": "List the elements of all the triple bonds.",
        "evidence": "triple bond refers to bond_type = '#';",
        "SQL": "SELECT DISTINCT\n  `T3`.`element`\nFROM `bond` AS `T1`\nINNER JOIN `connected` AS `T2`\n  ON `T1`.`bond_id` = `T2`.`bond_id`\nINNER JOIN `atom` AS `T3`\n  ON `T2`.`atom_id` = `T3`.`atom_id`\nWHERE\n  `T1`.`bond_type` = '#'",
        "difficulty": "challenging"
    },
    {
        "question_id": 263,
        "db_id": "toxicology",
        "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
        "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
        "SQL": "SELECT\n  CAST(COUNT(CASE WHEN `T`.`element` = 'cl' THEN `T`.`atom_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`atom_id`)\nFROM (\n  SELECT\n    `T1`.`atom_id`,\n    `T1`.`element`\n  FROM `atom` AS `T1`\n  INNER JOIN `molecule` AS `T2`\n    ON `T1`.`molecule_id` = `T2`.`molecule_id`\n  INNER JOIN `bond` AS `T3`\n    ON `T2`.`molecule_id` = `T3`.`molecule_id`\n  WHERE\n    `T3`.`bond_type` = '-'\n) AS `T`",
        "difficulty": "challenging"
    },
    {
        "question_id": 268,
        "db_id": "toxicology",
        "question": "What are the elements for bond id TR001_10_11?",
        "evidence": "TR001_10_11 is the bond id;",
        "SQL": "SELECT\n  `T2`.`element`\nFROM `connected` AS `T1`\nINNER JOIN `atom` AS `T2`\n  ON `T1`.`atom_id` = `T2`.`atom_id`\nWHERE\n  `T1`.`bond_id` = 'TR001_10_11'",
        "difficulty": "challenging"
    },
    {
        "question_id": 281,
        "db_id": "toxicology",
        "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
        "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
        "SQL": "SELECT DISTINCT\n  `T1`.`element`\nFROM `atom` AS `T1`\nINNER JOIN `molecule` AS `T2`\n  ON `T1`.`molecule_id` = `T2`.`molecule_id`\nWHERE\n  `T2`.`label` = '+'\n  AND SUBSTR(`T1`.`atom_id`, -1) = '4'\n  AND LENGTH(`T1`.`atom_id`) = 7",
        "difficulty": "challenging"
    },
    {
        "question_id": 282,
        "db_id": "toxicology",
        "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
        "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "SQL": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS DECIMAL(10,2)) / NULLIF(COUNT(atom_id), 0) AS ratio, label FROM SubQuery GROUP BY label",
        "difficulty": "challenging"
    },
    {
        "question_id": 28,
        "db_id": "california_schools",
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "SQL": "SELECT\n  `T2`.`School`,\n  `T2`.`DOC`\nFROM `frpm` AS `T1`\nINNER JOIN `schools` AS `T2`\n  ON `T1`.`CDSCode` = `T2`.`CDSCode`\nWHERE\n  `T2`.`FundingType` = 'Locally funded'\n  AND (\n    `T1`.`Enrollment (K-12)` - `T1`.`Enrollment (Ages 5-17)`\n  ) > (\n    SELECT\n      AVG(`T3`.`Enrollment (K-12)` - `T3`.`Enrollment (Ages 5-17)`)\n    FROM `frpm` AS `T3`\n    INNER JOIN `schools` AS `T4`\n      ON `T3`.`CDSCode` = `T4`.`CDSCode`\n    WHERE\n      `T4`.`FundingType` = 'Locally funded'\n  )",
        "difficulty": "challenging"
    },
    {
        "question_id": 36,
        "db_id": "california_schools",
        "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
        "evidence": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500",
        "SQL": "SELECT\n  `T2`.`AdmFName1`,\n  `T2`.`AdmLName1`,\n  `T2`.`AdmFName2`,\n  `T2`.`AdmLName2`,\n  `T2`.`AdmFName3`,\n  `T2`.`AdmLName3`\nFROM `satscores` AS `T1`\nINNER JOIN `schools` AS `T2`\n  ON `T1`.`cds` = `T2`.`CDSCode`\nORDER BY\n  `T1`.`NumGE1500` DESC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 62,
        "db_id": "california_schools",
        "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
        "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
        "SQL": "SELECT\n  COUNT(`T2`.`School`)\nFROM `frpm` AS `T1`\nINNER JOIN `schools` AS `T2`\n  ON `T1`.`CDSCode` = `T2`.`CDSCode`\nWHERE\n  `T2`.`County` = 'Los Angeles'\n  AND `T2`.`Charter` = 0\n  AND CAST(`T1`.`Free Meal Count (K-12)` AS DOUBLE) * 100 / `T1`.`Enrollment (K-12)` < 0.18",
        "difficulty": "challenging"
    },
    {
        "question_id": 83,
        "db_id": "california_schools",
        "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
        "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
        "SQL": "SELECT\n  `T2`.`City`,\n  COUNT(`T2`.`CDSCode`)\nFROM `frpm` AS `T1`\nINNER JOIN `schools` AS `T2`\n  ON `T1`.`CDSCode` = `T2`.`CDSCode`\nWHERE\n  `T2`.`Magnet` = 1\n  AND `T2`.`GSoffered` = 'K-8'\n  AND `T1`.`NSLP Provision Status` = 'Multiple Provision Types'\nGROUP BY\n  `T2`.`City`",
        "difficulty": "challenging"
    },
    {
        "question_id": 87,
        "db_id": "california_schools",
        "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
        "evidence": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
        "SQL": "SELECT\n  `T2`.`AdmEmail1`,\n  `T2`.`AdmEmail2`\nFROM `frpm` AS `T1`\nINNER JOIN `schools` AS `T2`\n  ON `T1`.`CDSCode` = `T2`.`CDSCode`\nWHERE\n  `T2`.`County` = 'San Bernardino'\n  AND `T2`.`City` = 'San Bernardino'\n  AND `T2`.`DOC` = 54\n  AND DATE_FORMAT(CAST(`T2`.`OpenDate` AS DATETIME), '%Y') BETWEEN '2009' AND '2010'\n  AND `T2`.`SOC` = 62",
        "difficulty": "challenging"
    },
    {
        "question_id": 94,
        "db_id": "financial",
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "SQL": "SELECT\n  `T1`.`account_id`,\n  (\n    SELECT\n      MAX(`A11`) - MIN(`A11`)\n    FROM `district`\n  )\nFROM `account` AS `T1`\nINNER JOIN `district` AS `T2`\n  ON `T1`.`district_id` = `T2`.`district_id`\nINNER JOIN `disp` AS `T3`\n  ON `T1`.`account_id` = `T3`.`account_id`\nINNER JOIN `client` AS `T4`\n  ON `T3`.`client_id` = `T4`.`client_id`\nWHERE\n  `T2`.`district_id` = (\n    SELECT\n      `district_id`\n    FROM `client`\n    WHERE\n      `gender` = 'F'\n    ORDER BY\n      `birth_date` ASC\n    LIMIT 1\n  )\nORDER BY\n  `T2`.`A11` DESC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 115,
        "db_id": "financial",
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "SQL": "SELECT\n  CAST(SUM(`T1`.`gender` = 'M') AS DOUBLE) * 100 / COUNT(`T1`.`client_id`)\nFROM `client` AS `T1`\nINNER JOIN `district` AS `T2`\n  ON `T1`.`district_id` = `T2`.`district_id`\nWHERE\n  `T2`.`A3` = 'south Bohemia'\nGROUP BY\n  `T2`.`A4`\nORDER BY\n  `T2`.`A4` DESC\nLIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 116,
        "db_id": "financial",
        "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
        "SQL": "SELECT\n  CAST((\n    SUM(CASE WHEN `T3`.`date` = '1998-12-27' THEN `T3`.`balance` ELSE 0 END) - SUM(CASE WHEN `T3`.`date` = '1993-03-22' THEN `T3`.`balance` ELSE 0 END)\n  ) AS DOUBLE) * 100 / SUM(CASE WHEN `T3`.`date` = '1993-03-22' THEN `T3`.`balance` ELSE 0 END)\nFROM `loan` AS `T1`\nINNER JOIN `account` AS `T2`\n  ON `T1`.`account_id` = `T2`.`account_id`\nINNER JOIN `trans` AS `T3`\n  ON `T3`.`account_id` = `T2`.`account_id`\nWHERE\n  `T1`.`date` = '1993-07-05'",
        "difficulty": "challenging"
    },
    {
        "question_id": 125,
        "db_id": "financial",
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "SQL": "SELECT\n  CAST((\n    `T3`.`A13` - `T3`.`A12`\n  ) AS DOUBLE) * 100 / `T3`.`A12`\nFROM `loan` AS `T1`\nINNER JOIN `account` AS `T2`\n  ON `T1`.`account_id` = `T2`.`account_id`\nINNER JOIN `district` AS `T3`\n  ON `T2`.`district_id` = `T3`.`district_id`\nWHERE\n  `T1`.`status` = 'D'",
        "difficulty": "challenging"
    },
    {
        "question_id": 149,
        "db_id": "financial",
        "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
        "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
        "SQL": "SELECT\n  `T3`.`type`\nFROM `district` AS `T1`\nINNER JOIN `account` AS `T2`\n  ON `T1`.`district_id` = `T2`.`district_id`\nINNER JOIN `disp` AS `T3`\n  ON `T2`.`account_id` = `T3`.`account_id`\nWHERE\n  `T3`.`type` <> 'OWNER' AND `T1`.`A11` BETWEEN 8000 AND 9000",
        "difficulty": "challenging"
    },
    {
        "question_id": 169,
        "db_id": "financial",
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "SQL": "SELECT\n  CAST((\n    SUM(\n      CASE\n        WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1997'\n        THEN `T1`.`amount`\n        ELSE 0\n      END\n    ) - SUM(\n      CASE\n        WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1996'\n        THEN `T1`.`amount`\n        ELSE 0\n      END\n    )\n  ) AS DOUBLE) * 100 / SUM(\n    CASE\n      WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1996'\n      THEN `T1`.`amount`\n      ELSE 0\n    END\n  )\nFROM `loan` AS `T1`\nINNER JOIN `account` AS `T2`\n  ON `T1`.`account_id` = `T2`.`account_id`\nINNER JOIN `disp` AS `T3`\n  ON `T3`.`account_id` = `T2`.`account_id`\nINNER JOIN `client` AS `T4`\n  ON `T4`.`client_id` = `T3`.`client_id`\nWHERE\n  `T4`.`gender` = 'M' AND `T3`.`type` = 'OWNER'",
        "difficulty": "challenging"
    },
    {
        "question_id": 173,
        "db_id": "financial",
        "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "evidence": "k_symbol refers to the purpose of payments",
        "SQL": "SELECT\n  `T1`.`frequency`,\n  `T2`.`k_symbol`\nFROM `account` AS `T1`\nINNER JOIN (\n  SELECT\n    `account_id`,\n    `k_symbol`,\n    SUM(`amount`) AS `total_amount`\n  FROM `order`\n  GROUP BY\n    `account_id`,\n    `k_symbol`\n) AS `T2`\n  ON `T1`.`account_id` = `T2`.`account_id`\nWHERE\n  `T1`.`account_id` = 3 AND `T2`.`total_amount` = 3539",
        "difficulty": "challenging"
    }
]